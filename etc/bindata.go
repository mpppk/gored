// Code generated by go-bindata.
// sources:
// tmpl/Makefile.tmpl
// tmpl/config.tmpl.yml
// tmpl/docker-compose.tmpl.yml
// DO NOT EDIT!

package etc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcd\x6a\xe3\x30\x10\x3e\x47\x4f\x31\x84\x1c\x92\x83\xec\xbb\x21\xb0\x69\x1b\x9a\xb2\xad\x13\xd2\x9f\x65\x59\x96\x56\x91\x26\xb2\x88\x25\x19\x49\x6e\x4b\x4b\xdf\x7d\x91\xed\x10\x6f\x20\xa4\x27\x69\xe6\xfb\x34\x33\x9a\xbf\xf5\x7c\xb5\x7c\x5e\xfe\xca\xe7\x6b\x98\xc2\xe7\x27\x24\x8f\x1e\x5d\xce\x34\xc2\xd7\x17\x69\xc0\x7c\x76\x37\xef\xb0\x35\x56\x76\x8f\x5d\x3c\xde\xdc\x5e\x3d\xaf\x66\x0f\x8b\x0e\xbc\xa8\x55\x29\x56\x2c\x14\x11\x7d\x9a\xaf\xef\x6f\x96\x79\x1f\x7f\x42\xe7\x95\x35\x7b\x86\xda\x0a\xdc\x42\x5d\x09\x16\x90\x00\xd4\x53\x5a\x13\x34\x42\x6d\x09\xd9\x28\x23\x58\x60\x19\x19\x48\x4b\x3b\x01\x68\xb5\x93\x80\x81\x03\xb5\xf1\x48\x3b\x7d\x22\x2d\x04\x5d\x95\x29\x21\x02\x2b\x9f\x91\x81\xc0\x0a\xd0\xf8\xda\x21\x21\x1e\x43\x5d\x35\x76\x40\x62\x80\xd1\x67\xfd\x05\x52\x85\xa2\xde\x24\xdc\xea\x54\xda\x92\x19\x99\x0a\xac\x52\xae\x45\x3c\x4f\x52\xef\x98\x0f\xe8\xb4\x32\xc2\xa7\xb2\x54\x02\x4f\x32\xb5\x0d\xa8\xd1\xa4\xd2\x6e\x6a\xdd\x1a\x6e\xaf\x27\x5f\xdc\x5b\x23\x75\x9d\x4a\xfb\xfe\xd1\xd1\xdf\x3f\xce\x92\x0b\x5e\xb4\xe4\x82\x17\x27\xc9\x81\x9b\x9d\xd7\xa9\x2c\x1c\x21\xa5\x32\x21\x83\x98\xa4\x48\xd7\x18\x58\xd4\xa0\x23\x24\xa0\xef\x21\x10\x45\x48\xd2\x24\x49\x08\xd9\xc4\xa2\xf6\xb0\x46\x86\xd1\xf8\x50\xfd\x09\x21\xca\xf8\xc0\xca\xb2\x47\xeb\x34\xc7\x44\xee\xac\xf7\x3d\x93\x8d\xab\xf8\xe0\xfd\x03\x68\xf5\x3a\x7d\x7d\x69\x33\x05\xbe\xb0\x6f\x40\x1d\x8c\xc6\xfd\x46\x9a\xbc\x00\x15\xd3\x24\x15\xca\x87\xf4\x3c\xf7\xc8\x79\x24\x53\x66\x04\xe5\x56\x6b\x15\x8e\x22\x68\x4c\x55\x2c\xf0\x02\xe8\xdb\xd1\xd3\x41\xcc\x71\x54\xd3\x1c\xce\xba\x25\x03\xa9\x02\x30\x21\xe0\x72\x31\xcb\xaf\xe7\xb7\xcb\xeb\x44\x8b\x56\xdb\x7a\x06\xca\x34\x0c\x2f\x0b\xe4\x3b\x65\x24\x28\x03\xbc\x60\x46\xa2\x87\xca\x29\xeb\x20\x58\x08\x4c\xca\x88\xd9\x2d\xbc\xb6\x63\x73\xde\x31\xfc\xf1\x3b\x55\x01\x57\x7f\x87\xad\xb7\xc0\x24\x7c\x2f\xda\xaa\xf6\x05\x0c\x8b\x10\x2a\x9f\xa5\xe9\x68\x7c\x7d\xf3\xb0\x78\xbc\x78\x7e\x58\xfe\x9c\xe7\x93\x1f\xbd\x7e\x1a\x8d\x0f\xfb\x62\xb2\x97\xe2\x82\x98\x0c\x61\x31\x9f\x5d\x65\xba\x19\x13\x42\x1c\x96\xc8\x3c\x66\x70\x28\x79\x4c\xa3\x03\x4a\x6b\x8f\xce\xc4\x25\xf2\x9f\xb1\xb3\x91\xc2\xf7\xaa\x4e\x08\x57\x8e\x97\xc8\x55\x46\x06\xfb\x6b\xd7\xb6\x14\xa1\xff\xb3\xe9\xa8\x2f\x11\x92\xac\x16\xcb\xfc\x77\x06\xfb\x8d\xd3\xf4\x47\xb3\x41\x20\x4e\x4a\x3b\x17\xad\xa5\x7d\x7f\x1f\x7e\x07\x47\xed\x05\x5d\x06\x60\x1f\xc3\xbf\x00\x00\x00\xff\xff\x3a\x33\xbb\xa3\x69\x05\x00\x00")

func tmplMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMakefileTmpl,
		"tmpl/Makefile.tmpl",
	)
}

func tmplMakefileTmpl() (*asset, error) {
	bytes, err := tmplMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/Makefile.tmpl", size: 1385, mode: os.FileMode(420), modTime: time.Unix(1515208374, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplConfigTmplYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xc1\x4a\xc4\x30\x10\xbd\xf7\x2b\xe6\xe4\x41\xe8\x16\x3c\x86\x3d\x7a\xf1\xa0\x88\xe0\xb9\xa4\xe9\xb4\x8d\x4d\x32\x75\x92\xb8\x2c\xcb\xfe\xbb\x24\xad\xeb\xb6\xa0\xec\x9c\x32\x8f\xf7\xe6\xcd\xe4\x7d\x21\x7b\x4d\x4e\xc0\x43\xf1\x41\x8d\x17\x05\x40\x13\xb5\x69\xd3\x03\xa0\x25\x35\x22\x0b\xb8\xcb\x58\x86\x00\x4a\xd0\x56\xf6\x28\xe0\x74\x82\xdd\x63\x66\x3c\x25\x00\xce\xe7\xcc\x38\x10\x8f\xda\xf5\x75\xab\x19\x55\x20\x3e\x0a\xa8\x7a\xaa\x3c\xab\xaa\xd7\x61\x88\xcd\x4e\x91\xad\x92\xf8\xdd\x23\xbf\x48\x9b\x94\xb9\x7f\xc3\x89\x96\x3e\x4f\xf2\x01\x27\x2f\x2e\xb6\x6a\x40\x35\x52\x0c\x17\x80\xa3\x13\x60\xe5\x88\x10\xd0\x07\x28\xbb\xbc\xd2\xb3\x1c\xb1\xd3\x06\x5f\x65\x18\xe6\x49\x8c\x06\xa5\xc7\x79\xd2\x7e\x2f\xe0\xfe\xf7\x9e\xdb\x3d\x9a\x68\xa7\x52\xba\xb6\x54\x64\xad\xfe\xc7\x6e\x2b\x5c\xec\xff\x12\xa4\xff\xea\x0c\x1d\xf2\x16\x57\x79\x2c\x49\xd4\xd2\xb5\xf5\xea\x82\x9f\xa0\x66\x9f\x75\x34\x2b\xe2\x5c\x8c\x9f\x51\x33\xfa\x6b\x6c\x2b\x4c\xd5\x69\x13\x90\x37\xb4\x86\xa5\x53\xc3\x56\x0c\x40\xce\x1c\xd3\x79\x3e\x20\x17\xdf\x01\x00\x00\xff\xff\x58\x41\x09\x3c\x45\x02\x00\x00")

func tmplConfigTmplYmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplConfigTmplYml,
		"tmpl/config.tmpl.yml",
	)
}

func tmplConfigTmplYml() (*asset, error) {
	bytes, err := tmplConfigTmplYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/config.tmpl.yml", size: 581, mode: os.FileMode(420), modTime: time.Unix(1514950825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplDockerComposeTmplYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x92\x41\x6b\xc2\x30\x14\xc7\xef\x7e\x8a\x87\xc8\x0e\x83\xda\xc3\x6e\xc1\xd3\x70\x6c\x32\xe6\x64\x28\x3b\x4a\x9a\x3c\xeb\xa3\x4d\x22\x49\xdb\x1d\xc4\xef\x3e\x92\x28\x8a\x90\xae\xac\x97\xf2\xda\xdf\xff\xd7\xfc\xd3\x74\x68\x1d\x19\xcd\x60\xfc\x34\x1e\x39\xb4\x1d\x09\x74\x6c\x04\x50\xb4\x54\x4b\x06\x0f\xe1\x3e\x02\x00\x20\xc5\x4b\x64\x70\x3c\xc2\x74\x6e\x44\x85\x76\xe1\x1f\xc0\xe9\x14\xde\x76\xa6\x6e\x55\x8c\xfa\x2b\x83\xc9\xea\x7b\xce\xf2\xd2\xe4\xce\x8a\xbc\xa4\x66\xdf\x16\x53\x61\x54\xee\xf3\x1b\x87\x76\xc9\x95\x0f\x87\xf9\x0b\x0f\xe6\x3c\x87\x3c\xea\x8e\xac\xd1\x0a\x75\x73\x11\xbe\x2e\xd6\x6f\x9b\xe7\xed\xfa\xf3\xfd\x65\xc9\x60\x72\x3b\x06\xe2\xc7\xd8\x8a\x74\xb9\x95\x64\x19\xfc\xf3\xb3\xc2\x28\xc5\xb5\x64\xa0\x78\x85\x71\x07\x20\xdb\x85\xc6\x1f\xbc\xc2\x1d\xd5\xb8\xe2\xcd\x3e\xe2\x05\x69\xc9\x1b\x1e\xd7\x37\x9b\x31\x78\xbc\x6e\xd5\x9d\x28\x92\x69\x55\x4d\x97\x9e\xbd\x1e\x8f\xa5\x25\x0d\xba\x21\x12\x8f\xf5\x94\xf2\xa9\x4c\x86\xdf\x3b\xa4\xd9\x0d\x9e\x96\x0a\x6b\x9c\x8b\xe7\xe9\x6f\xe5\x15\xee\x5b\xa5\x3a\x64\x5c\xcb\xcc\x47\x69\x48\xeb\xbb\x44\x5a\x6d\xb1\x46\xee\x70\x80\xf2\x4c\xa6\x54\xbf\x01\x00\x00\xff\xff\xc0\x8c\xc3\x69\x59\x03\x00\x00")

func tmplDockerComposeTmplYmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplDockerComposeTmplYml,
		"tmpl/docker-compose.tmpl.yml",
	)
}

func tmplDockerComposeTmplYml() (*asset, error) {
	bytes, err := tmplDockerComposeTmplYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/docker-compose.tmpl.yml", size: 857, mode: os.FileMode(420), modTime: time.Unix(1514987217, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/Makefile.tmpl": tmplMakefileTmpl,
	"tmpl/config.tmpl.yml": tmplConfigTmplYml,
	"tmpl/docker-compose.tmpl.yml": tmplDockerComposeTmplYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"Makefile.tmpl": &bintree{tmplMakefileTmpl, map[string]*bintree{}},
		"config.tmpl.yml": &bintree{tmplConfigTmplYml, map[string]*bintree{}},
		"docker-compose.tmpl.yml": &bintree{tmplDockerComposeTmplYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


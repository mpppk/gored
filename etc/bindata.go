// Code generated by go-bindata.
// sources:
// tmpl/Makefile.tmpl
// tmpl/config.tmpl.yml
// tmpl/docker-compose.tmpl.yml
// DO NOT EDIT!

package etc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4f\x6f\xea\x38\x10\x3f\xe3\x4f\x31\x42\x1c\xe0\xe0\xe4\x1e\x09\x69\x69\x5f\x54\xd0\xbe\x17\x10\x85\x5d\xed\x89\x9a\x78\xb0\xad\xc6\x76\x64\x3b\xb4\x6a\xd5\xef\xbe\x72\x12\x04\x45\x42\xf4\x94\xcc\xfc\x7e\x33\xe3\xf9\xfb\xb8\x5d\xaf\xf3\x62\xb3\x5b\xe7\xff\x2c\x9e\x17\xcb\x02\xa6\x30\x1a\x7b\x89\x55\x05\x42\x05\x70\x78\xa4\x35\x73\x1e\x81\x52\x2f\xad\x0b\x30\xcf\x67\xbf\x26\x64\x9d\xaf\x96\xbb\xe5\xbf\x45\xbe\x86\x29\x7c\x7e\x42\xb2\xf5\xe8\x0a\xa6\x11\xbe\xbe\x3a\xb0\x98\xfd\xc9\x7b\x6c\x8d\xb5\x3d\x61\x0f\xdb\xc5\xef\x5f\xbb\xd5\x6c\x33\xef\xc1\x87\x46\x55\x7c\xc5\x82\x8c\xa8\x3a\x70\x3c\x40\x53\x73\x16\x90\x00\x34\x53\xda\x10\x34\x5c\x1d\x08\xd9\x2b\xc3\x59\x60\x19\x19\x08\x4b\x7b\x01\x68\xfd\x2a\x00\x43\x09\xd4\xc6\x4f\xda\xeb\x13\x61\x21\xe8\xba\x4a\x09\xe1\x58\xfb\x8c\x0c\x38\xd6\x80\xc6\x37\x0e\x09\xf1\x18\x9a\xba\xf5\x03\x02\x03\x8c\x3e\x9b\xaf\x98\xab\x6c\xf6\x49\x69\x75\x2a\x6c\xc5\x8c\x48\x39\xd6\x69\xa9\x79\xfc\xde\xa4\xfe\x61\x3e\xa0\xd3\xca\x70\x9f\x8a\x4a\x71\xbc\xc9\xd4\x36\xa0\x46\x93\x0a\xbb\x6f\x74\xe7\xb8\xfb\xbd\x69\xf1\x6c\x8d\xd0\x4d\x2a\xec\xfb\x47\x4f\x7f\xff\xb8\x4b\x96\xa5\xec\xc8\xb2\x94\x37\xc9\xa1\x34\xaf\x5e\xa7\x42\x3a\x42\x2a\x65\x42\x06\xb1\x48\x91\xae\x31\xb0\xa8\x41\x47\x48\x40\x7f\x81\x40\x14\x21\x49\x93\x24\x21\x64\x1f\x5b\x76\x81\xb5\x32\x8c\xc6\xe7\xde\x4e\x08\x51\xc6\x07\x56\x55\x17\xb4\x5e\x73\x4d\x2c\x9d\xf5\xfe\xc2\x65\x1b\x2a\x1a\xbc\x7f\x00\xad\x8f\xd3\xe3\x4b\x57\x29\xf0\xd2\xbe\x01\x75\xdf\xed\x5f\x80\xf2\x69\x92\x72\xe5\x43\x7a\x8f\x79\x15\x38\x52\x29\x33\x9c\x96\x56\x6b\x15\xae\xa2\xb7\x8e\x6a\x16\x4a\x09\xf4\xed\xca\x74\x10\xeb\x1b\xd5\xb4\x80\x3b\x41\xc9\x20\xae\x11\xe3\x1c\x1e\xe7\xb3\xe2\x29\xff\xbd\x7c\x4a\x34\xef\xb4\x5d\x5c\xa0\x4c\xc3\xf0\x51\x62\xf9\xaa\x8c\x00\x65\xa0\x94\xcc\x08\xf4\x50\x3b\x65\x1d\x04\x0b\x81\x09\x11\x31\x7b\x80\x23\x3a\xaf\xac\xb9\x17\x76\xd8\x45\x08\x4c\xc0\x4f\xde\x57\x37\x5e\xc2\x50\x86\x50\xfb\x2c\x4d\x47\xe3\xa7\xc5\x66\xbe\x7d\xd8\x6d\x96\x7f\xe7\xc5\xe4\xaf\x8b\xd9\x19\x8d\xcf\x9b\x3f\x39\x49\x71\xd5\x27\xc3\xf6\x32\x64\xba\x5d\x09\x42\x1c\x56\xc8\x3c\x66\x70\x6e\x6f\x2c\x9b\x03\x4a\x1b\x8f\xce\xc4\x73\xf0\xcd\xd9\x9d\x77\xc2\x4f\x3a\x4c\x48\xa9\x5c\x59\x61\xa9\x32\x32\x38\xfd\xf6\xe3\x49\x11\x2e\xb3\x9a\x8e\x2e\x25\x42\x92\xd5\x7c\x59\xfc\x97\xc1\xe9\xb2\xb4\xb3\xd0\x5e\x0a\x88\x1b\xd1\xcd\x7f\xe7\xe9\x34\xc7\xe7\xcc\xe0\x6a\x94\xa0\xcf\x1e\x4e\x6f\xf8\x3f\x00\x00\xff\xff\xe6\x28\x2e\x04\x66\x05\x00\x00")

func tmplMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMakefileTmpl,
		"tmpl/Makefile.tmpl",
	)
}

func tmplMakefileTmpl() (*asset, error) {
	bytes, err := tmplMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/Makefile.tmpl", size: 1382, mode: os.FileMode(420), modTime: time.Unix(1514984070, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplConfigTmplYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xc1\x4a\xc4\x30\x10\xbd\xf7\x2b\xe6\xe4\x41\xe8\x16\x3c\x86\x3d\x7a\xf1\xa0\x88\xe0\xb9\xa4\xe9\xb4\x8d\x4d\x32\x75\x92\xb8\x2c\xcb\xfe\xbb\x24\xad\xeb\xb6\xa0\xec\x9c\x32\x8f\xf7\xe6\xcd\xe4\x7d\x21\x7b\x4d\x4e\xc0\x43\xf1\x41\x8d\x17\x05\x40\x13\xb5\x69\xd3\x03\xa0\x25\x35\x22\x0b\xb8\xcb\x58\x86\x00\x4a\xd0\x56\xf6\x28\xe0\x74\x82\xdd\x63\x66\x3c\x25\x00\xce\xe7\xcc\x38\x10\x8f\xda\xf5\x75\xab\x19\x55\x20\x3e\x0a\xa8\x7a\xaa\x3c\xab\xaa\xd7\x61\x88\xcd\x4e\x91\xad\x92\xf8\xdd\x23\xbf\x48\x9b\x94\xb9\x7f\xc3\x89\x96\x3e\x4f\xf2\x01\x27\x2f\x2e\xb6\x6a\x40\x35\x52\x0c\x17\x80\xa3\x13\x60\xe5\x88\x10\xd0\x07\x28\xbb\xbc\xd2\xb3\x1c\xb1\xd3\x06\x5f\x65\x18\xe6\x49\x8c\x06\xa5\xc7\x79\xd2\x7e\x2f\xe0\xfe\xf7\x9e\xdb\x3d\x9a\x68\xa7\x52\xba\xb6\x54\x64\xad\xfe\xc7\x6e\x2b\x5c\xec\xff\x12\xa4\xff\xea\x0c\x1d\xf2\x16\x57\x79\x2c\x49\xd4\xd2\xb5\xf5\xea\x82\x9f\xa0\x66\x9f\x75\x34\x2b\xe2\x5c\x8c\x9f\x51\x33\xfa\x6b\x6c\x2b\x4c\xd5\x69\x13\x90\x37\xb4\x86\xa5\x53\xc3\x56\x0c\x40\xce\x1c\xd3\x79\x3e\x20\x17\xdf\x01\x00\x00\xff\xff\x58\x41\x09\x3c\x45\x02\x00\x00")

func tmplConfigTmplYmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplConfigTmplYml,
		"tmpl/config.tmpl.yml",
	)
}

func tmplConfigTmplYml() (*asset, error) {
	bytes, err := tmplConfigTmplYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/config.tmpl.yml", size: 581, mode: os.FileMode(420), modTime: time.Unix(1514950825, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplDockerComposeTmplYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x31\x6b\xc3\x30\x10\x85\x77\xff\x8a\x23\x84\x0e\x05\xc7\x43\x37\x91\xa9\xc4\xb4\xa1\xd4\x36\x26\x21\xa3\x51\xe4\x8b\x23\x6c\xe9\xca\xc9\x76\x87\x90\xff\x5e\x2c\xb9\x34\x43\x03\xa5\x5a\xc4\xe9\xde\xfb\xee\xf4\x46\x64\xa7\xc9\x0a\x58\x3c\x2d\x22\x87\x3c\x6a\x85\x4e\x44\x00\xc7\x41\x77\xb5\x80\x07\x7f\x47\x00\x00\xda\xc8\x06\x05\x5c\x2e\xb0\xda\x90\x6a\x91\xb7\xd3\x03\x5c\xaf\xbe\x3b\x52\x37\x98\x60\x9d\x4e\x0c\xcb\xe2\xb0\x11\x49\x43\x89\x63\x95\x34\xba\x3f\x0f\xc7\x95\x22\x93\x4c\xfe\xbd\x43\xce\xa4\x99\xcc\xbe\x2e\xf1\x83\xe6\xda\xfb\xd1\x8e\x9a\xc9\x1a\xb4\xfd\x37\xf0\x65\xbb\x7b\xdd\x3f\x57\xbb\xfc\x2d\xcd\x04\x2c\x6f\xcb\x59\x51\xa6\x45\x5e\xe5\x87\x2c\x2d\xc3\x92\x37\x43\xbc\xe2\x93\xb8\xd5\xb6\xa9\x6a\xcd\x02\xfe\xb9\x98\x22\x63\xa4\xad\x05\x18\xd9\x62\xc8\x08\xe2\x93\x1f\xf7\x2e\x5b\x3c\xe9\x0e\x0b\xd9\x9f\x83\xdc\xb7\xe3\xda\x67\x15\xbe\xb1\x5e\x0b\x78\xfc\x49\xf4\x17\xda\x2c\xbf\x0f\x65\xec\x50\x3a\xfc\x03\x6f\x56\xde\x43\x7d\x05\x00\x00\xff\xff\x64\xbb\x0f\x93\xfa\x01\x00\x00")

func tmplDockerComposeTmplYmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplDockerComposeTmplYml,
		"tmpl/docker-compose.tmpl.yml",
	)
}

func tmplDockerComposeTmplYml() (*asset, error) {
	bytes, err := tmplDockerComposeTmplYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/docker-compose.tmpl.yml", size: 506, mode: os.FileMode(420), modTime: time.Unix(1514891738, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/Makefile.tmpl": tmplMakefileTmpl,
	"tmpl/config.tmpl.yml": tmplConfigTmplYml,
	"tmpl/docker-compose.tmpl.yml": tmplDockerComposeTmplYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"Makefile.tmpl": &bintree{tmplMakefileTmpl, map[string]*bintree{}},
		"config.tmpl.yml": &bintree{tmplConfigTmplYml, map[string]*bintree{}},
		"docker-compose.tmpl.yml": &bintree{tmplDockerComposeTmplYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


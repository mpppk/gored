// Code generated by go-bindata.
// sources:
// tmpl/Makefile.tmpl
// tmpl/docker-compose.tmpl.yml
// DO NOT EDIT!

package etc

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMakefileTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x5d\x6f\xda\x30\x14\x7d\xc6\xbf\xe2\x0a\xf1\x40\x1e\x1c\xbf\x23\x45\x1a\x6d\xb3\x82\xd6\x01\x4a\xa1\xdb\x9e\x90\x49\x2e\x76\xd4\x38\xb6\x6c\x87\x56\xad\xfa\xdf\x27\x27\x41\x50\x56\xb4\x27\xb8\x3e\x27\xe7\x7e\x9e\xdb\x4d\x96\xa5\x8b\xf5\x36\x4b\x9f\xe6\x8f\xf3\xe5\x02\x12\x18\x8d\x9d\xc4\xaa\x02\x51\x7a\xb0\x78\xa0\x86\x5b\x87\x40\xa9\x93\xda\x7a\x98\xa5\xd3\xbb\x88\xdc\x6c\xe6\x0f\x77\xdb\x87\xbb\xef\x0f\xd3\xfb\x47\x48\x60\x48\x7f\x07\xbe\x6c\x76\x71\xae\x15\x7b\xd4\xb5\x50\x0d\x13\xfa\xf5\x2d\xb6\x78\x28\x5d\xa9\xeb\x64\x34\xbe\x4c\x16\x0d\x49\x96\xae\x96\xdb\xe5\xaf\x45\x9a\x41\x02\xef\xef\x10\x6f\x1c\xda\x05\x57\x08\x1f\x1f\x1d\xb8\x98\xfe\x4c\x7b\x2c\x43\xa3\x8f\x58\x57\xc1\x6a\xba\x9e\xf5\xe0\x4d\x53\x56\xc5\x8a\x7b\x19\xd0\x63\xa6\xa7\x34\xbb\xec\x4a\xef\x1a\x65\xc0\x49\xfd\x02\xd4\x42\xcc\x72\x55\xb0\x88\x94\xfb\x02\xf7\xd0\x98\x82\x7b\x24\x00\x4d\x42\x1b\x82\x75\x51\xee\x09\xd9\x95\x75\xc1\x3d\x9f\x90\x81\xd0\xb4\x0f\x80\x9a\x67\x01\xe8\x73\xa0\x3a\xfc\xb0\xfe\x3d\x16\x1a\xbc\x32\x15\x23\xa4\x40\xe3\x26\x64\x50\xa0\x01\xac\x5d\x63\x31\x3c\x1d\xb0\xa2\x3d\x20\x34\x08\xf4\x30\x7a\x6f\x3e\xce\x47\x27\x74\xc5\x6b\xc1\x0a\x34\x6d\x65\x05\x9a\xab\x54\xa5\x3d\x2a\xac\x59\xd7\x52\x4b\xef\xfe\x5e\xfd\xe2\x6c\x2f\x3d\xfd\xf5\xed\xbf\x64\x99\xcb\x8e\x2c\x73\x79\x95\xec\xf3\xfa\xd9\x29\x26\xa4\x25\xc4\xa3\xf3\x13\x08\x6d\xb6\xf4\x10\x42\xcc\xe2\x38\x26\x64\x17\x96\x74\x86\xb5\x31\xd0\xaa\xd8\x57\x5c\xb8\x64\x34\xfe\x74\x58\x11\x1c\x1f\xc2\x9e\x23\x42\x72\xab\x9d\x3b\xd3\x68\xb5\x83\xd0\xeb\x1b\x50\x73\x48\x0e\xa7\x1b\xeb\x37\x1f\x01\x2d\x92\x98\x15\xa5\xf3\xec\x2b\xf4\x22\x41\x98\xde\x85\x74\x7b\x2e\x86\xfb\x5c\x02\x7d\xb9\xe0\x0f\x82\x47\x72\xad\x54\xe9\x81\x72\x05\xc3\x5b\x89\xf9\x73\x59\x0b\x28\x6b\xc8\x25\xaf\x05\x3a\x30\xb6\xd4\x16\xbc\x06\xcf\x85\x08\x98\xde\xc3\x01\x6d\xf0\x04\x7c\x51\xd2\xb0\x53\xf5\x5c\xc0\xbf\x60\x87\x99\xc6\x49\x18\x4a\xef\x8d\x9b\x30\x36\x1a\xdf\xcf\xd7\xb3\xcd\xcd\x76\xbd\xfc\x91\x2e\xa2\x6f\x67\x5b\x19\x8d\x4f\xfe\x8a\x8e\x51\x30\x54\x34\x6c\x8d\x3c\x51\xdc\x79\xb4\x84\x58\xac\x90\x3b\x9c\x40\xdb\xed\x69\xcc\x64\x20\xa4\x05\x4a\x1b\x87\xb6\x0e\xce\xfb\xa4\xf8\x45\x81\x70\x6d\xd2\x84\xc4\xab\xd9\x72\xf1\xa7\x4f\xd1\x1e\x45\x3b\xe7\x93\x29\xce\xf2\x42\x5f\xd0\xdf\x00\x00\x00\xff\xff\xec\x92\x4d\xbc\x9f\x04\x00\x00")

func tmplMakefileTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMakefileTmpl,
		"tmpl/Makefile.tmpl",
	)
}

func tmplMakefileTmpl() (*asset, error) {
	bytes, err := tmplMakefileTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/Makefile.tmpl", size: 1183, mode: os.FileMode(420), modTime: time.Unix(1514792737, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _tmplDockerComposeTmplYml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x31\x6b\xc3\x30\x14\x84\x77\xff\x8a\x23\x84\x0e\x05\xc7\x43\x37\x91\xa9\xc4\xb4\xa1\xd4\x0e\x26\x21\xa3\x51\xec\x17\x55\xd8\x92\xca\x53\xec\x0e\x21\xff\xbd\x58\xb6\x69\x86\xd2\xa1\x5a\x1e\x27\xdd\xa7\x77\x5c\x4f\xec\xb5\xb3\x02\x8b\xa7\x45\xe4\x89\x7b\x5d\x91\x17\x11\x70\xea\x74\x5b\x0b\x3c\x84\x19\x01\x80\x36\x52\x91\xc0\xf5\x8a\xd5\xc6\x55\x0d\xf1\x76\xb8\xc0\xed\x16\x5e\x7b\xd7\x76\x66\x44\x87\x13\x63\xb9\x3b\x6e\x44\xa2\x5c\xe2\xb9\x4a\x94\xbe\x7c\x74\xa7\x55\xe5\x4c\x32\xf0\x07\x4f\x9c\x49\x33\xc0\x41\x17\xf4\xe9\x26\x1d\x78\xb2\xbd\x66\x67\x0d\xd9\xcb\xfc\xe1\xcb\x76\xff\x7a\x78\x2e\xf7\xf9\x5b\x9a\x09\x2c\xef\xe5\xe4\x28\xd2\x5d\x5e\xe6\xc7\x2c\x2d\xc6\x90\x77\x4b\x82\xe3\xcb\x71\xa3\xad\x2a\x6b\xcd\x02\xff\x0c\x56\x39\x63\xa4\xad\x05\x94\x63\xaa\x31\x97\x13\x66\x5c\x87\x56\xc6\xc0\xeb\xb5\xc0\xe3\x4f\x77\xbf\x71\x93\x3f\x02\x98\x5a\x92\x9e\xfe\x26\x8d\x6c\x68\x76\x22\x3e\x23\x79\x97\x0d\x9d\x75\x4b\xd1\x77\x00\x00\x00\xff\xff\x99\x6c\x5b\x90\xc4\x01\x00\x00")

func tmplDockerComposeTmplYmlBytes() ([]byte, error) {
	return bindataRead(
		_tmplDockerComposeTmplYml,
		"tmpl/docker-compose.tmpl.yml",
	)
}

func tmplDockerComposeTmplYml() (*asset, error) {
	bytes, err := tmplDockerComposeTmplYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/docker-compose.tmpl.yml", size: 452, mode: os.FileMode(420), modTime: time.Unix(1514786932, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/Makefile.tmpl": tmplMakefileTmpl,
	"tmpl/docker-compose.tmpl.yml": tmplDockerComposeTmplYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"Makefile.tmpl": &bintree{tmplMakefileTmpl, map[string]*bintree{}},
		"docker-compose.tmpl.yml": &bintree{tmplDockerComposeTmplYml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

